#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_EXTRA_CSS: ./css/ember.css
#+REVEAL_EXTRA_CSS: ./css/local.css
#+REVEAL_THEME: none
#+REVEAL_TRANS: fade
#+REVEAL_DEFAULT_FRAG_STYLE: roll-in
#+REVEAL_PLUGINS: (notes highlight)
#+REVEAL_HIGHLIGHT_CSS: https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/androidstudio.min.css
#+REVEAL_DEFAULT_FRAG_STYLE: roll-in
#+OPTIONS: toc:nil num:nil reveal_slide_number:nil author:nil date:nil timestamp:nil
#+REVEAL_INIT_OPTIONS: reveal_width:1200 reveal_height:800 navigationMode:linear
#+REVEAL_HLEVEL: 0
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./css/local.css" />

#+TITLE: Money Transfer Kata

* Money Transfer Anemic
** Layered Architecture
#+ATTR_HTML: :width 50%
[[file:./img/n-tier-architecture.png]]

** Anemic Domain Model
Domain object contains only data. All business logic located in service layer.

#+attr_reveal: :frag (roll-in)
- Pros
  #+attr_reveal: :frag (roll-in)
  - Simple and widely accepted approach.
- Cons
  #+attr_reveal: :frag (roll-in)
  - Mixing IO with business logic leads to fragile tests, that hard to write.
  - Data can be changed from anywhere. No consistency guaranties.
  - Hard to reason about data model invariants.

* Money Transfer Rich
** Clean Architecture
a.k.a. Hexagonal / Onion / Ports&Adapters Architecture
#+ATTR_HTML: :width 50%
[[file:./img/clean_arch.png]]

** Rich Domain Model
Data and behavior encapsulated inside domain objects

#+attr_reveal: :frag (roll-in)
- Pros
  #+attr_reveal: :frag (roll-in)
  - Fast tests without mocks for business logic.
  - Objects guarantee their consistency.

- Cons
  #+attr_reveal: :frag (roll-in)
  - Required careful classes design. Not suitable for teams without experience

* Testing Strategy
#+ATTR_HTML: :width 70%
[[file:./img/test_shapes.png]]

* Choice of architectural style
#+begin_src plantuml :file ./img/algo.svg :cache yes
@startuml
start
if (Complex\nbusiness logic?) then (yes)
  #palegreen:Rich Domain Model\nClean Architecture\n__ORM__ or JDBC\nTesting pyramid;
  kill;
else (no)
  if (Complex data structures) then (yes)
    #palegreen:Anemic Domain Model\nLayered Architecture\n__JDBC__ or ORM\nTesting daimond;
    kill;
  else (no)
    #palegreen:Anemic Domain Model\nLayered Architecture\nJDBC\nReversed testing pyramid;
    kill;
  endif
endif
@enduml
#+end_src

#+ATTR_HTML: :width 100%
#+RESULTS[66027dacf71993c531b2fc6b63cf4f259840e90c]:
[[file:./img/algo.svg]]

* Recommendations
- Functional core Imperative shell. Separate business logic from IO if it's possible.
- Always valid domain model. Make wrong state impossible.
- No silver bullet. Use patterns and technologies only when they needed.

* Links
- [[https://www.oreilly.com/library/view/learning-domain-driven-design/9781098100124/][Learning Domain-Driven Design {Book}]]
- [[https://www.oreilly.com/library/view/clean-code-a/9780136083238/][Clean Code: A Handbook of Agile Software Craftsmanship {Book}]]
